@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<h4>SaaS Solution</h4>
<ul class="nav nav-tabs" id="systemTypeTabs">
    <li class="nav-item">
        <a class="nav-link" data-tab="governance" href="#">Governance & Monitoring </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-tab="archiver" href="#">Archiver</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" data-tab="provisioning" href="#">Provisioning</a>
    </li>
</ul>

<div class="tab-content mt-3">
    <div class="tab-pane fade show active" id="provisioning">
        <div class="text-center">
            <div class="modal-body row">
                <div class="col-md-6">
                    <table class="table table-primary table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Azure Resource</th>
                                <th>Description</th>
                                <th>Price</th>
                            </tr>

                        </thead>
                        <tbody>
                            <tr data-partial="StaticWebApp" style="cursor: pointer;">
                                <td>Static Web App</td>
                                <td>Microsoft Hosted Static Web Site </td>
                                <td>$0.00</td>
                            </tr>
                            <tr data-partial="ApplicationGateway" style="cursor: pointer;">
                                <td>Application Gateway v2 with Firewall</td>
                                <td>Layer 7 Loadbalancer with DDoS protection</td>
                                <td>$0.00</td>
                            </tr>

                            <tr data-partial="ApplicationInsights" style="cursor: pointer;">
                                <td>Application Insights</td>
                                <td>Part of the Azure Monitor Suite of Services</td>
                                <td>$0.00</td>
                            </tr>

                        </tbody>
                        <tfoot>
                            <tr class="table-dark">
                                <td colspan="2"><strong>Total Monthly Cost</strong></td>
                                <td id="totalCost">$0.00</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class="col-md-6">
                    <partial name="Partials/StaticWebApp" />
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global state management
        const formStates = {};

        function formatCurrency(amount) {
            return `$${parseFloat(amount).toFixed(2)}`;
        }

        function updateTableCosts(partialName, monthlyCost) {
            const row = document.querySelector(`tr[data-partial="${partialName}"]`);
            if (row) {
                const priceCell = row.querySelector('td:last-child');
                if (priceCell) {
                    priceCell.textContent = formatCurrency(monthlyCost);
                }
            }
            updateTotalCost();
        }

        function updateTotalCost() {
            const priceCells = document.querySelectorAll('tr[data-partial] td:last-child');
            const total = Array.from(priceCells).reduce((sum, cell) => {
                const value = parseFloat(cell.textContent.replace(/[US$,]/g, '')) || 0;
                return sum + value;
            }, 0);

            const totalElement = document.getElementById('totalCost');
            if (totalElement) {
                totalElement.textContent = formatCurrency(total);
            }
        }

        // Generic form state management
        function saveFormState(formId) {
            const form = document.getElementById(formId);
            if (!form) return;

            const state = {};
            const inputs = form.querySelectorAll('input, select');
            inputs.forEach(input => {
                state[input.id] = input.value;
            });

            formStates[formId] = state;
        }

        function restoreFormState(formId) {
            const form = document.getElementById(formId);
            if (!form || !formStates[formId]) return;

            const state = formStates[formId];
            Object.keys(state).forEach(inputId => {
                const input = document.getElementById(inputId);
                if (input) {
                    input.value = state[inputId];
                }
            });
        }

        // Generic form initialization
        function initializeForm(formId, calculatePrice) {
            const form = document.getElementById(formId);
            if (!form) return;

            // Restore previous state if it exists
            restoreFormState(formId);

            const inputs = form.querySelectorAll('input, select');

            // Remove existing event listeners and add new ones
            inputs.forEach(input => {
                input.removeEventListener('change', calculatePrice);
                input.removeEventListener('input', calculatePrice);
                input.addEventListener('change', calculatePrice);
                input.addEventListener('input', calculatePrice);
            });

            // Calculate initial price
            calculatePrice();
        }

        // Specific form initializations
        function initializeStaticWebAppForm() {
            const calculatePrice = () => {
                const tier = document.getElementById('tier')?.value;
                const appCount = parseInt(document.getElementById('appCount')?.value) || 0;
                const bandwidth = parseInt(document.getElementById('bandwidth')?.value) || 0;
                const bandwidthUnit = document.getElementById('bandwidthUnit')?.value;

                // Save state after getting values
                saveFormState('staticWebAppForm');

                // Rest of your calculation logic
                const bandwidthInGB = bandwidthUnit === 'TB' ? bandwidth * 1024 : bandwidth;
                const appCost = tier === 'free' ? 0 : appCount * 9;
                let bandwidthCost = 0;
                if (tier === 'standard' && bandwidthInGB > 100) {
                    bandwidthCost = (bandwidthInGB - 100) * 0.20;
                }

                const total = appCost + bandwidthCost;

                // Update displays
                if (document.getElementById('appCost')) document.getElementById('appCost').textContent = formatCurrency(appCost);
                if (document.getElementById('bandwidthCost')) document.getElementById('bandwidthCost').textContent = formatCurrency(bandwidthCost);
                if (document.getElementById('totalCost')) document.getElementById('totalCost').textContent = formatCurrency(total);

                updateTableCosts('StaticWebApp', total);
            };

            initializeForm('staticWebAppForm', calculatePrice);
        }

        function initializeApplicationGatewayForm() {
            const calculatePrice = () => {
                const instances = parseInt(document.getElementById('instances')?.value) || 0;
                const hours = parseInt(document.getElementById('hours')?.value) || 0;
                const dataProcessed = parseInt(document.getElementById('dataProcessed')?.value) || 0;
                const dataProcessedUnit = document.getElementById('dataProcessedUnit')?.value;
                const outboundData = parseInt(document.getElementById('outboundData')?.value) || 0;
                const outboundDataUnit = document.getElementById('outboundDataUnit')?.value;
                const timeUnit = document.getElementById('timeUnit')?.value;

                // Save state after getting values
                saveFormState('appGatewayForm');

                // Rest of your calculation logic
                const dataProcessedInGB = dataProcessedUnit === 'TB' ? dataProcessed * 1024 : dataProcessed;
                const outboundDataInGB = outboundDataUnit === 'TB' ? outboundData * 1024 : outboundData;

                let totalHours = hours;
                switch(timeUnit) {
                    case 'days': totalHours = hours * 24; break;
                    case 'month': totalHours = hours * 730; break;
                }

                const hourlyRate = 0.095;
                const dataProcessingRate = 0.016;
                const outboundDataRate = 0.087;

                const gatewayCost = instances * totalHours * hourlyRate;
                const dataProcessingCost = dataProcessedInGB * dataProcessingRate;
                const outboundCost = outboundDataInGB * outboundDataRate;
                const totalMonthlyCost = gatewayCost + dataProcessingCost + outboundCost;

                // Update displays
                if (document.getElementById('gatewayHoursCost')) document.getElementById('gatewayHoursCost').textContent = formatCurrency(gatewayCost);
                if (document.getElementById('dataProcessedCost')) document.getElementById('dataProcessedCost').textContent = formatCurrency(dataProcessingCost);
                if (document.getElementById('outboundDataCost')) document.getElementById('outboundDataCost').textContent = formatCurrency(outboundCost);
                if (document.getElementById('upfrontCost')) document.getElementById('upfrontCost').textContent = formatCurrency(0);
                if (document.getElementById('monthlyCost')) document.getElementById('monthlyCost').textContent = formatCurrency(totalMonthlyCost);

                updateTableCosts('ApplicationGateway', totalMonthlyCost);
            };

            initializeForm('appGatewayForm', calculatePrice);
        }

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Tab handling
            const tabLinks = document.querySelectorAll('#systemTypeTabs .nav-link');
            tabLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    tabLinks.forEach(tab => tab.classList.remove('active'));
                    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('show', 'active'));
                    this.classList.add('active');
                    const tabId = this.getAttribute('data-tab');
                    const tabContent = document.getElementById(tabId);
                    if (tabContent) tabContent.classList.add('show', 'active');
                });
            });

            // Table row click handling
            const tableRows = document.querySelectorAll('tr[data-partial]');
            const rightColumn = document.querySelector('.col-md-6:last-child');

            tableRows.forEach(row => {
                row.addEventListener('click', async function() {
                    const partialName = this.getAttribute('data-partial');
                    if (!partialName) return;

                    try {
                        const response = await fetch(`?handler=LoadPartial&partialName=${partialName}`);
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                        const html = await response.text();
                        rightColumn.innerHTML = html;

                        // Initialize the appropriate form based on the partial
                        switch(partialName) {
                            case 'StaticWebApp':
                                initializeIndexForm();
                                break;
                            case 'ApplicationGateway':
                                initializeApplicationGatewayForm();
                                break;
                            // Add new cases here for additional partials
                        }
                    } catch (error) {
                        console.error('Error loading partial:', error);
                    }
                });
            });

            // Initial form initialization
            initializeStaticWebAppForm();
        });
    </script>
}

